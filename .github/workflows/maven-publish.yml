name: Maven CI/CD Pipeline

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: mvn打包
        run: mvn -B clean package --file pom.xml

      - name: 上传target目录
        uses: actions/upload-artifact@v4
        with:
          name: target-dir
          path: target
          retention-days: 1

      - name: 上传JAR文件
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: target/*.jar

  # 代码扫描任务 - 保持您命名的 code-scan
  code-scan:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载target目录
        uses: actions/download-artifact@v4
        with:
          name: target-dir
          path: ${{ github.workspace }}/target

      # 关键修复：添加编译验证步骤
      - name: 验证字节码存在
        run: |
          echo "检查字节码文件是否存在:"
          ls -la ${{ github.workspace }}/target/classes
          if [ ! -d "${{ github.workspace }}/target/classes" ]; then
            echo "##[error]未找到编译后的字节码文件！"
            exit 1
          fi

      - name: 设置JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 初始化CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'java'
          paths: 'src/main/java'

      # 关键修复：添加编译命令
      - name: 编译项目(供CodeQL分析)
        run: |
          # 使用已下载的字节码
          echo "使用预先编译的字节码"
          # 或重新编译（如果字节码无效）
          # mvn -B clean compile

      - name: 执行CodeQL分析
        uses: github/codeql-action/analyze@v3
        with:
          fail-on-severity: error
          fail-on-errors: true

      - name: 检查严重问题
        if: always()
        run: |
          if [ -f codeql-analysis.sarif ] && grep -q '"level": "error"' codeql-analysis.sarif; then
            echo "##[error]发现严重代码问题，终止流水线！"
            exit 1
          fi

  deploy:
    needs: [build, code-scan]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: 下载JAR文件
        uses: actions/download-artifact@v4
        with:
          name: jar-file
          path: artifacts

      - name: 部署到服务器
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          JAR_FILE=$(ls artifacts/*.jar)
          echo "找到JAR文件: $JAR_FILE"
          
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "$JAR_FILE" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/deployer/app/
          
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "sudo systemctl restart myapp"